---
title: 'Validity, tightness, <br>and forecasting power <br>of risk premium bounds'
author: "<br>Kevin Crotty<br>(with Kerry Back and Seyed Kazempour) <br><br>Jones School Board of Advisors"
date: 'September 2022'
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "Back, Crotty, Kazempour; JFE 2022"
        self-contained: true
        code-fold: true
        theme: [default, custom.scss]
        show-slide-number: print
execute:
    echo: true
    freeze: auto
jupyter: python3
---

## Expected returns
<br><br>
What do you think the S&P 500 return will be over the next year?


. . .

<br><br>

What about AAPL? or MSFT?



## Applications of expected returns in finance 
<br>
Investments

::: {.nonincremental}
- market-level: market-timing 

- stock-level: optimal portfolio choice

::: 

<br>

. . .

Capital budgeting and valuation

::: {.nonincremental}
 - what is the present value of a project or firm? 
::: 

. . .

## Existing methods to estimate expected returns

Market risk premium 

::: {.nonincremental}
 - Historical average return

 - Return implied by current prices and analyst forecasts

 - Surveys of market participants

::: 

. . .

Stock risk premia

::: {.nonincremental}
 - Economic models: CAPM (requires MRP input)

 - Factor models: Fama-French, etc

 - Machine learning

::: 


## Economic theory + options data 

**Martin, QJE 2017**:  <br>&nbsp;&nbsp;&nbsp;&nbsp;
What is the expected return on the market? 

. . . 

**Chabi-Yo and Loudis, JFE 2020**: <br>&nbsp;&nbsp;&nbsp;&nbsp; 
The conditional expected market return


. . . 

**Martin and Wagner, JF 2019**:  <br>&nbsp;&nbsp;&nbsp;&nbsp;
What is the expected return on a stock?

**Kadan and Tang, RFS 2020**: <br>&nbsp;&nbsp;&nbsp;&nbsp;A bound on expected stock returns

**Chabi-Yo, Dim, and Vilkov, Mgt Sci 2022**: <br>&nbsp;&nbsp;&nbsp;&nbsp;Generalized bounds on the conditional expected excess return on individual stocks



## Are expected returns at least this high?

```{python}
#| echo: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go

INPUT = './ds_mkt_monthly.csv'

#%% ===========================================================================
# Import the dataset
# =============================================================================
df = pd.read_csv(INPUT)

df['date'] = pd.to_datetime(df.date)
df.set_index('date',inplace=True)

horizons = ['1','3','6','12']
for h in horizons : 
    df['ret'+h]    = df['f_mktrf'+h]
    df['martin'+h] = df['lb_m_'+h]
    df['cyl'+h]    = df['lb_cylr_'+h]
    df['slack_martin'+h] = df['ret'+h] - df['martin'+h]
    df['slack_cyl'+h]    = df['ret'+h] - df['cyl'+h]

cols = []
for h in horizons :
    cols = cols + ['ret'+h,'martin'+h,'cyl'+h,'slack_martin'+h,'slack_cyl'+h]
df = df[cols]
df['dtime_date'] = pd.to_datetime(df.index)
df['Date'] = df.dtime_date.dt.strftime('%b %Y')

string = '%{x}<br>'
string +="Martin Bound: %{y:0.0f}%"
string += "<extra></extra>"
trace_m12 = go.Scatter(x=df.index,y=df.martin12,mode='lines', name="Martin Bound", hovertemplate=string)

string = '%{x}<br>'
string +="CYL Bound: %{y:0.0f}%"
string += "<extra></extra>"
trace_cyl12 = go.Scatter(x=df.index,y=df.cyl12,mode='lines', name="Chabi/Yo-Loudis Bound", hovertemplate=string)

fig = go.Figure()
fig.add_trace(trace_m12)
fig.add_trace(trace_cyl12)
# fig.add_trace(trace_true)
fig.layout.xaxis["title"] = "Date"
fig.layout.yaxis["title"] = "Expected Return (%)"
fig.update_yaxes(tickformat=".0f")
fig.update_xaxes(tickformat="%b %Y")
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
# fig.update_yaxes(range=[0, 27])
fig.update_layout(hoverlabel=dict(font_size=20))
fig.show()

```


## The bounds are horizon-specific

```{python}
#| echo: false

fig = go.Figure()

horizons = ['12','6','3','1']
for h in horizons : 
    bnd = 'martin'+h
    dfsub = df.loc['2008':'2010']
    string = '%{x}<br>'
    string += h +"-month Martin Bound: %{y:0.0f}%" 
    string += "<extra></extra>"
    trace = go.Scatter(x=dfsub.index,y=dfsub[bnd],mode='lines', name=h+"-month Martin Bound", hovertemplate=string)
    fig.add_trace(trace)

# fig.add_trace(trace_cyl12)
# fig.add_trace(trace_true)
fig.layout.xaxis["title"] = "Date"
fig.layout.yaxis["title"] = "Expected Return (%)"
fig.update_yaxes(tickformat=".0f")
fig.update_xaxes(tickformat="%b %Y")
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
fig.update_yaxes(range=[0, 30])
fig.update_layout(hoverlabel=dict(font_size=20))
fig.show()

```



## Two economic questions<br><br>

1. Validity:  <br>Is there evidence that the bounds are too high relative to subequent realized returns?<br><br>

2. Tightness: <br>If valid, are the bounds slack or tight?  <br>&nbsp;&nbsp;&nbsp;If slack, the bound **underestimates** expected returns.  <br>&nbsp;&nbsp;&nbsp;If tight, the bound is the expected return!


## Testing the bounds<br><br>
1. Slackness: what is the average of realized return minus the bound?<br><br>
2. "Weighted" slackness:  allow some observations to count more than others<br><br>
3. Apply "appropriate" hypothesis testing

## What are realized returns over the next year?
```{python}
#| echo: false
trace = go.Scatter(x=df.martin12,y=df.ret12,mode='markers', name="Martin Bound", 
    customdata = df.Date,
    hovertemplate = '%{customdata}<br>Bound: %{x:.0f}%<br>Realized Return: %{y:.0f}%<extra></extra>'
    )
max_bound = df.martin12.max()
trace_45 = go.Scatter(x=np.linspace(0,max_bound,2), y=np.linspace(0,max_bound,2),mode='lines', name="45-degree line")

fig = go.Figure()
fig.add_trace(trace)
fig.add_trace(trace_45)
fig.layout.xaxis["title"] = "Bound (%)"
fig.layout.yaxis["title"] = "Excess Return (%)"
fig.update_xaxes(tickformat=".0f")
fig.update_yaxes(tickformat=".0f")
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
fig.update_layout(hoverlabel=dict(font_size=20))
fig.show()

```

## Results of testing the bounds<br>
Do the bounds systematically underestimate realized returns? Yes! <br><br>

. . . 

On average over a 30 year sample: <br>
<p style="padding-left: 1em;">
-the Martin bound is 5.2% too low<br>
-the Chabi-Yo/Loudis bound is 3.7% too low.
</p><br>

. . . 

Results of our fancy statistical tests conclude the same:<br>
<p align="center"> **The bounds are valid but not tight.** </p>

## Are the bounds useful for forecasting? <br><br>

There is a trade-off between having: <br>

1. a time-varying predictor <br>

2. a biased predictor


## Predictor time-variation and bias

```{python}
# | echo: false
numMonths = 30*12
b0 = 0.07
bbar = 0.06
a = 0.995
theta = 1
sd = 0.01
slack = 0.03
s0 = 0.04

from scipy.stats import multivariate_normal as mvn

# generate (tight) bound
b = pd.Series(dtype=float,index=range(numMonths+1))
u = pd.Series(mvn.rvs([0], [sd**2], size=numMonths+1,random_state = 10))

b.index.name = 'month'
b.iloc[0] = b0
for t in range(1,numMonths+1) :
    b.loc[t] = (1-a)*bbar + a*b.loc[t-1] + theta*u.loc[t]

# b.plot()

# time-varying slackness
s = pd.Series(dtype=float,index=range(numMonths+1))
v = pd.Series(mvn.rvs([0], [0.005**2], size=numMonths+1,random_state = 6))
s.index.name = 'month'
s.iloc[0] = s0
for t in range(1,numMonths+1) :
    s.loc[t] = (1-a)*slack + a*s.loc[t-1] + v.loc[t]
    s.loc[t] = max(s.loc[t],0)




df = pd.DataFrame(dtype='float', columns = ['expret', 'constant slackness','really slack','historical average','time-varying slackness'], index=range(numMonths))
df['expret'] = b[1:]
df['constant slackness'] = df.expret - slack
df['really slack'] = df.expret - 2.5*slack
df['historical average'] = bbar
df['time-varying slackness'] = df.expret - s[1:]
# df[['expret','time-varying slackness']].plot()
# df[['expret','constant slackness']].plot()


trace = go.Scatter(x=df.index,y=df['expret'],mode='lines', name="True Expected Return (Unobservable)", line=dict(color="black"), 
    hovertemplate = 'Expected Return %{y:.0%}<extra></extra>'
    )
trace1 = go.Scatter(x=df.index,y=df['constant slackness'],mode='lines', name="Bound w/ constant slackness (low)",  line=dict(color="orange"), 
    customdata = df['expret']-df['constant slackness'],
    hovertemplate = 'Bound: %{y:.0%}<br>Slackness: %{customdata:.1%}<extra></extra>'
    )

trace1a = go.Scatter(x=df.index,y=df['really slack'],mode='lines', name="Bound w/ constant slackness (high)",  line=dict(color="red"), 
    customdata = df['expret']-df['really slack'],
    hovertemplate = 'Bound: %{y:.0%}<br>Slackness: %{customdata:.1%}<extra></extra>'
    )

trace2 = go.Scatter(x=df.index,y=df['time-varying slackness'],mode='lines', name="Bound w/ time-varying slackness",  line=dict(color="blue"), 
    customdata = df['expret']-df['time-varying slackness'],
    hovertemplate = 'Bound: %{y:.0%}<br>Slackness: %{customdata:.1%}<extra></extra>'
    )

trace3 = go.Scatter(x=df.index,y=df['historical average'],mode='lines', name="Historical Average", line=dict(color="green"), 
    hovertemplate = 'Historical Average: %{y:.0%}<extra></extra>'
    )

fig = go.Figure()
fig.add_trace(trace)
fig.add_trace(trace3)
fig.add_trace(trace1)
fig.add_trace(trace1a)
fig.add_trace(trace2)


fig.layout.xaxis["title"] = "Time"
fig.layout.yaxis["title"] = "Expected Return (%)"
fig.update_xaxes(tickformat=".0f")
fig.update_yaxes(tickformat=".0%")
fig.update_yaxes(range=[-0.05, 0.28])
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
fig.update_layout(hoverlabel=dict(font_size=20))
fig.show()




```



## Are the bounds useful for forecasting? <br>Not yet!

We compare the magnitude of forecast errors of two predictors: 

1. the bounds

2. the historical average market return

. . . 

We cannot reject that the historical average market return is as good a forecast as using the bounds alone.

. . .

The bounds are too much of an underestimate (on average) for the time-variation to be useful for forecasting.


## Can we estimate the slackness?<br><br>

If we were able to predict how much of an underestimate the bounds are as a predictor, we might be able to improve forecasting!<br><br>

. . . 

Practical issue:  we have a fairly short time period for estimating average returns---only 30 years.


## Time needed for reliable forecasting?

We simulate how much data would be needed to estimate slackness well enough to beat the historical average as a predictor.

![](simulation_oosr2_cyl.png)

## Time needed to detect forecasting power?

Even more data is needed to detect a bound's forecasting superiority statistically.

![](simulation_pvals_cyl.png)



## Next research project

Option-based bounds<br>

- currently are too much of an underestimate of expected returns (too slack) to be useful in our lifetimes for prediction unless...

- may be improved by connecting financial theory and the data. <br>

. . . 


Financial theory suggests that the bounds will be more slack when risk aversion is higher.

**Can we estimate time-varying risk aversion to improve the slackness forecast?**


## Questions?

<br><br><br><br>

![](RiceLogo.png){fig-align="center"}
